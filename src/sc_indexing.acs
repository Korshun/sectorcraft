//===========================
// SECTOR INDEXING
//===========================

// Converts tile coordinates to tag.
// Returns 0 if coordinates are invalid.
function int TileTag(int x, int y)
{
	if (x < 0 || x >= MapWidth || y < 0 || y >= MapHeight)
		return 0; // Invalid coordinates.

	return y * MapWidth + x + 1;
}

// Convert sector tag to tile coordinates.
function int TileY(int index)
{
	return (index - 1) / MapWidth;
}
function int TileX(int index)
{
	return (index - 1) % MapWidth;
}

// Return nearby tile tags. (with checking for map boundaries)
function int LeftTile(int index)
{
	if (TileX(index) != 0)
		return index - 1;
	return 0;
}
function int RightTile(int index)
{
	if (TileX(index) != MapWidth - 1)
		return index + 1;
	return 0;
}
function int TopTile(int index)
{
	if (TileY(index) != MapHeight - 1)
		return index + MapWidth;
	return 0;
}
function int BottomTile(int index)
{
	if (TileY(index) != 0)
		return index - MapWidth;
	return 0;
}

// Return tags of lines surrounding the tile.
// Return 0 if the line doesn't exist.
function int BottomLine(int index)
{
	if (TileY(index) == 0)
		return 0;
	return index - MapWidth;
}
function int TopLine(int index)
{
	if (TileY(index) == MapHeight - 1)
		return 0;
	return index;
}
function int RightLine(int index)
{
	if (TileX(index) == MapWidth - 1)
		return 0;
	int base = BottomLine(TileTag(MapWidth - 1, MapHeight - 1));
	return base + TileX(index) * MapHeight + TileY(index) + 1;
}
function int LeftLine(int index)
{
	if (TileX(index) == 0)
		return 0;
	int base = BottomLine(TileTag(MapWidth - 1, MapHeight - 1));
	return base + (TileX(index) - 1) * MapHeight + TileY(index) + 1;
}

// Generic version :).
function int GetTileLine(int index, int side)
{
	switch (side)
	{
	case LINE_LEFT:   return LeftLine  (index);
	case LINE_RIGHT:  return RightLine (index);
	case LINE_BOTTOM: return BottomLine(index);
	case LINE_TOP:    return TopLine   (index);
	}

	return 0;
}

function int OppositeLine(int l)
{
	switch (l)
	{
	case LINE_LEFT:   return LINE_RIGHT;
	case LINE_RIGHT:  return LINE_LEFT;
	case LINE_TOP:    return LINE_BOTTOM;
	case LINE_BOTTOM: return LINE_TOP;
	}

	return LINE_NONE;
}

// Tells which side of line to edit
// when it is selected from outside of sector.
function int GetLineSide(int l)
{
	if (l == LINE_TOP || l == LINE_LEFT)
		return SIDE_BACK;
	return SIDE_FRONT;
}