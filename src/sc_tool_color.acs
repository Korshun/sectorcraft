function int GetLightColor(int s, int component)
{
	return WorldLightColors[s][component];
}

// Returns VALUE_UNCHANGED or 1.
function int SetLightColor(int s, int r, int g, int b)
{
	if (!CheckLock(s))
		return VALUE_UNCHANGED;
	
	if
	(
		   WorldLightColors[s][COLOR_RED]   == r
		&& WorldLightColors[s][COLOR_GREEN] == g
		&& WorldLightColors[s][COLOR_BLUE]  == b
	)
		return VALUE_UNCHANGED; 

	WorldLightColors[s][COLOR_RED]   = r;
	WorldLightColors[s][COLOR_GREEN] = g;
	WorldLightColors[s][COLOR_BLUE]  = b;

	Sector_SetColor(s, r, g, b);
	return 1;
}

// Set light color.
script 60 (void)
{
	SetCursorActor(0);
	if (!Target())
		terminate;
	SetActivatorToTarget(0);

	int r = CheckInventory("SC_SelectedColorR");
	int g = CheckInventory("SC_SelectedColorG");
	int b = CheckInventory("SC_SelectedColorB");

	if (SetLightColor(Target(), r, g, b) != VALUE_UNCHANGED)
		NotifyAction(StrParam(s:"Light color changed to",
			s:" \cg", d:r, s:" \cd", d:g, s:" \ch", d:b, s:"\c-."));
}

// Read light color.
script 61 (void)
{
	SetCursorActor(0);
	if (!Target())
		terminate;
	SetActivatorToTarget(0);

	int r = GetLightColor(Target(), COLOR_RED);
	int g = GetLightColor(Target(), COLOR_GREEN);
	int b = GetLightColor(Target(), COLOR_BLUE);

	TakeInventory("SC_SelectedColorR", 9999);
	TakeInventory("SC_SelectedColorG", 9999);
	TakeInventory("SC_SelectedColorB", 9999);

	GiveInventory("SC_SelectedColorR", r);
	GiveInventory("SC_SelectedColorG", g);
	GiveInventory("SC_SelectedColorB", b);

	GiveInventory("SC_SelectedColorCopied", 1); // Notify color picker about copied color.

	NotifyMode(StrParam(s:"Selected color ",
			s:" \cg", d:r, s:" \cd", d:g, s:" \ch", d:b, s:"\c-."));
}